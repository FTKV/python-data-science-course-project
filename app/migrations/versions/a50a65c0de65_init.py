"""'Init'

Revision ID: a50a65c0de65
Revises: 
Create Date: 2024-04-11 01:15:05.817127

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'a50a65c0de65'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    sa.Enum('PAYMENT', 'CHARGE', name='trxtype').create(op.get_bind())
    sa.Enum('CHECKED_IN', 'CHECKED_OUT', name='status').create(op.get_bind())
    sa.Enum('administrator', 'user', name='role').create(op.get_bind())
    op.create_table('users',
    sa.Column('username', sa.String(length=254), nullable=False),
    sa.Column('email', sa.String(length=254), nullable=False),
    sa.Column('password', sa.String(length=60), nullable=False),
    sa.Column('first_name', sa.String(length=254), nullable=True),
    sa.Column('last_name', sa.String(length=254), nullable=True),
    sa.Column('phone', sa.String(length=38), nullable=True),
    sa.Column('birthday', sa.Date(), nullable=True),
    sa.Column('avatar', sa.String(length=254), nullable=True),
    sa.Column('role', postgresql.ENUM('administrator', 'user', name='role', create_type=False), nullable=False),
    sa.Column('is_email_confirmed', sa.Boolean(), nullable=False),
    sa.Column('is_password_valid', sa.Boolean(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('username')
    )
    op.create_table('cars',
    sa.Column('plate', sa.String(length=32), nullable=False),
    sa.Column('model', sa.String(length=128), nullable=True),
    sa.Column('color', sa.String(length=32), nullable=True),
    sa.Column('description', sa.String(length=1024), nullable=True),
    sa.Column('is_blacklisted', sa.Boolean(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('plate')
    )
    op.create_table('parking_spots',
    sa.Column('title', sa.String(length=32), nullable=False),
    sa.Column('description', sa.String(length=1024), nullable=True),
    sa.Column('is_available', sa.Boolean(), nullable=False),
    sa.Column('is_out_of_service', sa.Boolean(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('title')
    )
    op.create_table('rates',
    sa.Column('title', sa.String(length=32), nullable=False),
    sa.Column('description', sa.String(length=1024), nullable=True),
    sa.Column('is_daily', sa.Boolean(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('title')
    )
    op.create_table('rate_details',
    sa.Column('start_date', sa.Date(), server_default=sa.text('now()'), nullable=False),
    sa.Column('end_date', sa.Date(), server_default=sa.text('now()'), nullable=False),
    sa.Column('start_hour', sa.Time(), nullable=False),
    sa.Column('end_hour', sa.Time(), nullable=False),
    sa.Column('amount', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('rate_id', sa.UUID(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['rate_id'], ['rates.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('reservations',
    sa.Column('resv_status', postgresql.ENUM('CHECKED_IN', 'CHECKED_OUT', name='status', create_type=False), nullable=False),
    sa.Column('start_date', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('end_date', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('debit', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('credit', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('car_id', sa.UUID(), nullable=False),
    sa.Column('rate_id', sa.UUID(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['car_id'], ['cars.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['rate_id'], ['rates.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('events',
    sa.Column('event_date', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('event_type', postgresql.ENUM('CHECKED_IN', 'CHECKED_OUT', name='status', create_type=False), nullable=False),
    sa.Column('parking_spot_id', sa.UUID(), nullable=False),
    sa.Column('reservation_id', sa.UUID(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['parking_spot_id'], ['parking_spots.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['reservation_id'], ['reservations.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('financial_transactions',
    sa.Column('trx_date', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('trx_type', postgresql.ENUM('PAYMENT', 'CHARGE', name='trxtype', create_type=False), nullable=False),
    sa.Column('debit', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('credit', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('reservation_id', sa.UUID(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['reservation_id'], ['reservations.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('financial_transactions')
    op.drop_table('events')
    op.drop_table('reservations')
    op.drop_table('rate_details')
    op.drop_table('rates')
    op.drop_table('parking_spots')
    op.drop_table('cars')
    op.drop_table('users')
    sa.Enum('administrator', 'user', name='role').drop(op.get_bind())
    sa.Enum('CHECKED_IN', 'CHECKED_OUT', name='status').drop(op.get_bind())
    sa.Enum('PAYMENT', 'CHARGE', name='trxtype').drop(op.get_bind())
    # ### end Alembic commands ###
